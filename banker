#include <stdio.h>

struct process {
    int allocation[3];
    int max[3];
    int need[3];
    int finish;
} p[10];

int main() {
    int n, i, j, avail[3], work[3], flag, count = 0, sequence[10], k = 0;

    printf("\nEnter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nEnter the allocated resources for process %d: ", i);
        scanf("%d %d %d", &p[i].allocation[0], &p[i].allocation[1], &p[i].allocation[2]);

        printf("Enter the maximum resources for process %d: ", i);
        scanf("%d %d %d", &p[i].max[0], &p[i].max[1], &p[i].max[2]);

        // Calculate need = max - allocation
        for (j = 0; j < 3; j++) {
            p[i].need[j] = p[i].max[j] - p[i].allocation[j];
        }
        p[i].finish = 0;
    }

    printf("\nEnter the available resources: ");
    scanf("%d %d %d", &avail[0], &avail[1], &avail[2]);

    for (i = 0; i < 3; i++) {
        work[i] = avail[i];
    }

    while (count != n) {
        int found = 0;
        for (i = 0; i < n; i++) {
            if (p[i].finish == 0) {
                flag = 1;
                for (j = 0; j < 3; j++) {
                    if (p[i].need[j] > work[j]) {
                        flag = 0;
                        break;
                    }
                }
                if (flag == 1) {
                    for (j = 0; j < 3; j++) {
                        work[j] += p[i].allocation[j];
                    }
                    p[i].finish = 1;
                    sequence[k++] = i;
                    found = 1;
                }
            }
        }

        if (!found) {
            break; // No process could proceed
        }

        // Count finished processes
        count = 0;
        for (i = 0; i < n; i++) {
            if (p[i].finish == 1)
                count++;
        }
    }

    printf("\nSafe Sequence:\n");
    if (count == n) {
        for (i = 0; i < k; i++) {
            printf("P%d ", sequence[i]);
        }
        printf("\nSystem is in a SAFE state.\n");
    } else {
        printf("System is NOT in a SAFE state.\n");
    }

    return 0;
}
